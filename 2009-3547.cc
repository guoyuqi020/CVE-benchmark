#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <iostream>
#include <stdlib.h>
#include <time.h>

// #define SLEEP_FOR_RACE
#ifdef SHOW_VUL
#define SHOW_NPD
#endif
// #define TEST_TIME

// #ifdef SLEEP_FOR_RACE
// #define printf(...) ;
// #endif

using namespace std;

struct pipe_inode_info
{
    unsigned int writers;
    unsigned int readers;

    pipe_inode_info()
    {
        writers = 0;
        readers = 0;
    }
};

struct INODE
{
    pthread_mutex_t i_mutex;
    struct pipe_inode_info *i_pipe;

    INODE()
    {
        pthread_mutex_init(&i_mutex, NULL);
        i_pipe = new pipe_inode_info();
    }
};

struct INODE *inode = new INODE();

static void *pipe_write_open(void *arg)
{
#ifdef SHOW_NPD
    sleep(5);
#endif
    pthread_mutex_lock(&inode->i_mutex);

    inode->i_pipe->readers++;
    printf("threadA: %x\n",inode->i_pipe);

    pthread_mutex_unlock(&inode->i_mutex);
    return NULL;
}

static void *involve(void *arg)
{
#ifdef SLEEP_FOR_RACE
#ifndef SHOW_NPD
    sleep(5);
#endif
#endif
    pthread_mutex_lock(&inode->i_mutex);
    inode->i_pipe = NULL;
    pthread_mutex_unlock(&inode->i_mutex);
    printf("threadA: %x\n",inode->i_pipe);
    return NULL;
}

int main()
{
#ifdef TEST_TIME
    static double run_time_begin;
    static double run_time_end;
    static double run_time_total;
    run_time_begin = clock();
#endif

    pthread_t t1, t2;

    pthread_create(&t1, NULL, pipe_write_open, NULL);
    pthread_create(&t2, NULL, involve, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    printf("\nprogram-successful-exit\n");

#ifdef TEST_TIME
    run_time_end = clock();
    run_time_total = run_time_end - run_time_begin;
    printf("test-the-total-time: %.3lf\n", (double)(run_time_total / CLOCKS_PER_SEC) * 1000);
#endif

    return 0;
}
