#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <iostream>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

// #define SLEEP_FOR_RACE
#ifdef SHOW_VUL
#define SHOW_DF
#endif

#ifdef SLEEP_FOR_RACE
#define printf(...) ;
#endif

// #define TEST_TIME

#define offsetof(TYPE, MEMBER) ((int)&((TYPE *)0)->MEMBER)

#define container_of(ptr, type, member) \
	(type *)((char *)(ptr) - (char *)&((type *)0)->member)

struct sock
{
	int sk_err;

	sock(int arg)
	{
		sk_err = arg;
	}
};

struct sk_buff
{
	struct sock *sk;
	int priority;
};

struct netlink_callback
{
	struct sk_buff *skb;
};

struct netlink_sock
{
	struct sock sk;
	struct netlink_callback cb;
};

struct pthread_args
{
	void *sk;
	int thread_id;
};

static inline struct netlink_sock *nlk_sk(struct sock *sk)
{
	return container_of(sk, struct netlink_sock, sk);
}

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int cnt = 1;

void *netlink_dump(void *args)
{
	void *sk = ((struct pthread_args *)args)->sk;
	int thread_id = ((struct pthread_args *)args)->thread_id;

	struct netlink_sock *nlk = nlk_sk((struct sock *)sk);
	printf("sk %p, nlk %p, &nlk->cb %p\n", sk, nlk, &(nlk->cb));
	struct netlink_callback *cb;
	struct sk_buff *skb = NULL;

	printf("%x: mutex %p\n", (unsigned int)pthread_self(), &mutex);
	pthread_mutex_lock(&mutex);

	cb = &nlk->cb;

	if (!skb)
	{
		skb = (struct sk_buff *)malloc(cnt * sizeof(struct sk_buff));
		cnt *= 4;
	}

	skb->sk = (struct sock *)sk;
	cb->skb = skb;

	pthread_mutex_unlock(&mutex);
#ifdef SHOW_DF
	sleep(5);
#endif

	free(cb->skb);

	printf("free %p\n", cb->skb);

	return NULL;
}

int main()
{
#ifdef TEST_TIME
	static double run_time_begin;
	static double run_time_end;
	static double run_time_total;
	run_time_begin = clock();
#endif

	pthread_t t1, t2;

	struct sock *sk = new sock(5);

	struct pthread_args arg1, arg2;
	arg1.sk = (void *)sk;
	arg1.thread_id = 1;
	arg2.sk = (void *)sk;
	arg2.thread_id = 2;

	pthread_create(&t1, NULL, netlink_dump, &arg1);
	pthread_create(&t2, NULL, netlink_dump, &arg2);

	pthread_join(t1, NULL);
	pthread_join(t2, NULL);

	printf("\nprogram-successful-exit\n");
#ifdef TEST_TIME
	run_time_end = clock();
	run_time_total = run_time_end - run_time_begin;
	printf("test-the-total-time: %.3lf\n", (double)(run_time_total / CLOCKS_PER_SEC) * 1000);
#endif
	return 0;
}
